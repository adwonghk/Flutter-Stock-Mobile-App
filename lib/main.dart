import 'dart:math';
import 'dart:async';
import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import 'package:http/http.dart' as http;

class Autogenerated {
  bool isSuccess;
  String action;
  String timestamp;
  List<Data> data;

  Autogenerated({this.isSuccess, this.action, this.timestamp, this.data});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    isSuccess = json['is_success'];
    action = json['action'];
    timestamp = json['timestamp'];
    if (json['data'] != null) {
      data = new List<Data>();
      json['data'].forEach((v) {
        data.add(new Data.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['is_success'] = this.isSuccess;
    data['action'] = this.action;
    data['timestamp'] = this.timestamp;
    if (this.data != null) {
      data['data'] = this.data.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Data {
  int classId;
  String description;
  List<Stock> details;

  Data({this.classId, this.description, this.details});

  Data.fromJson(Map<String, dynamic> json) {
    classId = json['class_id'];
    description = json['description'];
    if (json['Details'] != null) {
      details = new List<Stock>();
      json['Details'].forEach((v) {
        details.add(new Stock.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['class_id'] = this.classId;
    data['description'] = this.description;
    if (this.details != null) {
      data['Details'] = this.details.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Stock {
  String productId;
  String country;
  String name;
  String closePrice; // for some reason, dart's json parser does not see this as a double
  String changePercentage;
  String bookmark;
  int minInvestAmount;

  bool isSelected = false;

  Stock(
      {this.productId,
        this.country,
        this.name,
        this.closePrice,
        this.changePercentage,
        this.bookmark,
        this.minInvestAmount});

  Stock.fromJson(Map<String, dynamic> json) {
    productId = json['product_id'];
    country = json['country'];
    name = json['name'];
    closePrice = json['close_price'].toString();
    changePercentage = json['change_percentage'].toString();
    bookmark = json['bookmark'];
    minInvestAmount = json['min_invest_amount'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['product_id'] = this.productId;
    data['country'] = this.country;
    data['name'] = this.name;
    data['close_price'] = this.closePrice;
    data['change_percentage'] = this.changePercentage;
    data['bookmark'] = this.bookmark;
    data['min_invest_amount'] = this.minInvestAmount;
    return data;
  }
}

Future<Autogenerated> fetchStock() async {
  final response = await http.get('https://demo-api.bigmind.io/v1/products/classes');

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    return Autogenerated.fromJson(json.decode(response.body));
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load from rest API');
  }
}

void main() => runApp(MyApp());


MaterialColor generateMaterialColor(Color color) {
  return MaterialColor(color.value, {
    50: tintColor(color, 0.9),
    100: tintColor(color, 0.8),
    200: tintColor(color, 0.6),
    300: tintColor(color, 0.4),
    400: tintColor(color, 0.2),
    500: color,
    600: shadeColor(color, 0.1),
    700: shadeColor(color, 0.2),
    800: shadeColor(color, 0.3),
    900: shadeColor(color, 0.4),
  });
}

int tintValue(int value, double factor) =>
    max(0, min((value + ((255 - value) * factor)).round(), 255));

Color tintColor(Color color, double factor) => Color.fromRGBO(
    tintValue(color.red, factor),
    tintValue(color.green, factor),
    tintValue(color.blue, factor),
    1);

int shadeValue(int value, double factor) =>
    max(0, min(value - (value * factor).round(), 255));

Color shadeColor(Color color, double factor) => Color.fromRGBO(
    shadeValue(color.red, factor),
    shadeValue(color.green, factor),
    shadeValue(color.blue, factor),
    1);


class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Demo',
      theme: ThemeData(
        primarySwatch: generateMaterialColor(Color(0xFF2FC29D)),
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: MyHomePage(title: 'Consumer Product'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  MyHomePage({Key key, this.title}) : super(key: key);

  final String title;

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Future<Autogenerated> stockData;
  List<Stock> _stocks;
  String time = "time: null";
  Color selectedColor = Colors.transparent;
  bool period = false; // false = Weekly, true = Monthly

  void _printData() {
    setState(() {
      print(fetchStock());
    });
  }

  @override
  void initState() {
    super.initState();
    stockData = fetchStock();

    print(time); // debug
  }


  Widget getBasicInfo(String country, String name, String id) {
    return Padding(
      padding: EdgeInsets.all(1),
        child: Column(children: <Widget>[
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: <Widget>[
              Container(
                  color: Colors.teal,
                  padding: EdgeInsets.only(left: 4.0, right: 4.0),
                  margin: EdgeInsets.only(right: 10.0),
                  child: Text(
                    country,
                    style: TextStyle(color: Colors.white, fontSize: 10),
                  )
              ),
              Container(
                  child: Text(
                      name
                  )
              )
            ],
          ),
        ],)
    );
  }

  Widget getPercentageChange(String change, String price) {
    var dChange = double.tryParse(change);
    var cColor;

    if (dChange != null && dChange > 0.0) {
      change = "+" + change + "%";
      cColor = Colors.red;
    }
    if (dChange != null && dChange < 0.0) {
      change = change + "%";
      cColor = Colors.green;
    }
    // Some stocks do not provide a percentage change
    if (dChange == null) {
      dChange = 0.0;
      change = "0%";
      cColor = Colors.grey;
    }

    price = "\$" + price;

    return Align(
        alignment: Alignment.centerRight,
        child: Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: <Widget>[
              Center(
                  child: Text(
                    price,
                    style: TextStyle(color: cColor),
                )
              ),
              Container(
                decoration: BoxDecoration(
                  color: cColor,
                  borderRadius: BorderRadius.circular(5)
                ),
                padding: EdgeInsets.all(4.0),
                margin: EdgeInsets.only(left: 10.0),
                width: 80,
                child: Center(
                    child:Text(
                      change,
                      style: TextStyle(color: Colors.white),
                    ),
                )
            ),
          ],
        )
      )
    );
  }

  Future<Stock> _onRefresh() async {
    await Future.delayed(Duration(seconds: 1));
    setState(() {
      stockData = fetchStock();
      print(time);
    });
    return null;
  }

  onPressStock(Stock s, BuildContext context) {
    s.isSelected = true;
    createAlertDialog(context, s);
    print("on press " + s.name);
  }

  Future<String> createAlertDialog(BuildContext context, Stock s) {
    return showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) {
           return StatefulBuilder(builder: (context, setState) {
             return AlertDialog(
                 title: Text(s.name + " " + s.productId),
                 content: Column(
                   crossAxisAlignment: CrossAxisAlignment.center,
                   mainAxisSize: MainAxisSize.min,
                   children: <Widget>[
                     Align(
                       alignment: Alignment.centerLeft,
                       child: Text(
                           "Investment amount:"
                       ),
                     ),
                     TextField(
                       keyboardType: TextInputType.number,
                       decoration: InputDecoration(
                         border: OutlineInputBorder(),
                         labelText: s.minInvestAmount.toString(),
                       ),
                       onChanged: (text) {
                         if (int.parse(text) < s.minInvestAmount) {

                         }
                       },
                     ),
                     Align(
                       alignment: Alignment.centerLeft,
                       child: Text(
                           "Contribution perods:"
                       ),
                     ),
                     SwitchListTile(
                       title: Text(
                           (() {
                             if (period) {
                               return "Monthly";
                             } else {
                               return "Weekly";
                             }
                           }())
                       ),
                       value: period,
                       onChanged: (bool value) {
                         setState(() {
                           period = value;
                         });
                       },
                       secondary: const Icon(Icons.timeline),
                     ),
                     FlatButton(
                       onPressed: () {
                        Navigator.pop(context);
                       },
                       child: Text(
                         "Submit",
                       ),
                     )
                   ],
                 )
             );
           },
           );
        }
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: RefreshIndicator(
          onRefresh: _onRefresh,
          child: FutureBuilder<Autogenerated> (
            future: stockData,
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                //return Text(snapshot.data.data.elementAt(0).details.elementAt(0).name);
                _stocks = snapshot.data.data.elementAt(0).details;
                time = snapshot.data.timestamp;
                return ListView.builder(
                    itemCount: snapshot == null ? 0 : _stocks.length,
                    padding: EdgeInsets.all(10),
                    itemBuilder: (BuildContext context, int index) {
                      return InkWell(
                          child: Container(
                            child:Column(
                              children: <Widget>[
                                Padding(
                                  padding: EdgeInsets.all(7),
                                  child: Stack(children: <Widget>[
                                    Align(
                                      alignment: Alignment.centerRight,
                                      child: Stack(
                                        children: <Widget>[
                                          Padding(
                                            padding: const EdgeInsets.only(left: 10, top: 5, bottom: 5),
                                            child: Column(
                                              children: <Widget>[
                                                Row(
                                                  children: <Widget>[
                                                    getBasicInfo(_stocks.elementAt(index).country, _stocks.elementAt(index).name, _stocks.elementAt(index).productId),
                                                    Spacer(),
                                                    getPercentageChange(_stocks.elementAt(index).changePercentage, _stocks.elementAt(index).closePrice),
                                                  ],
                                                ),
                                              ],
                                            ),
                                          ),
                                          Positioned(
                                              bottom: 0,
                                              left: 44,
                                              child: Text(
                                                  _stocks.elementAt(index).productId,
                                                  style: TextStyle(color: Colors.blueGrey, fontSize: 10),
                                              )
                                          )
                                        ],
                                      ),
                                    )
                                  ],)
                                ),
                              Divider()
                          ]
                          )
                        ),
                        onTap: () => onPressStock(_stocks.elementAt(index), context),
                      );
                    },
                );
              } else if (snapshot.hasError) {
                return Text("${snapshot.error}");
              }
              return CircularProgressIndicator();
            },
          ),
        ),
      ),
      bottomNavigationBar: BottomAppBar(
        color: generateMaterialColor(Color(0xFF2FC29D)),
        shape: CircularNotchedRectangle(),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: <Widget>[
            IconButton(
              icon: Icon(
                Icons.home,
                color: Colors.white,
              )
            ),
            IconButton(
                icon: Icon(
                  Icons.attach_money,
                  color: Colors.white,
                )
            ),
            IconButton(
                icon: Icon(
                  Icons.dashboard,
                  color: Colors.white,
                )
            ),
          ],
        ),
      ),
    );
  }

}
